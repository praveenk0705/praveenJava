package apriori.gui;

import java.awt.EventQueue;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextArea;
import javax.swing.SpinnerNumberModel;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import javax.swing.JLabel;
import javax.swing.JButton;
import javax.swing.JTable;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableModel;
import java.awt.CardLayout;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.io.File;
import java.util.List;

import apriori.core.*;
import apriori.sources.*;

import javax.swing.ListSelectionModel;
import javax.swing.JSpinner;

/**
 * GUI for the APriori application.
 * 
 * The flow of execution is the following:
 * 1) The user chooses a source of transactions among Random, Test, Database and CSV File.
 * 2) The user chooses a support threshold and a confidence threshold.
 * 3) The user launches the algorithm and sees the results on the output table.
 * 4) The user can see the log.
 * 5) Go back to 1.
 * 
 * @author Benjamin Bouvier
 *
 */
public class AprioriGui {

	// Number of transactions generated by the random button
	protected static final int RANDOM_TRANSACTIONS_NUMBER = 20;

	private AprioriAlgorithm algorithm = new AprioriAlgorithm(this);

	private JFrame frame; 			// main window
	private JTabbedPane tabbedPane; // tab panel
	private JTextArea logField;		// log field for text

	private DataTable dataTable = new DataTable(); 			// transactions (input) table
	private OutputTable outputTable = new OutputTable();	// rules (output) table
	
	/**
	 * Used by the AprioriAlgorithm to log any informations.
	 * @param s What to log.
	 */
	public void log(String s) {
		logField.append("\n".concat(s));
	}
	
	/**
	 * Launches the algorithm
	 * @param support The support threshold
	 * @param confidence The confidence threshold
	 */
	private void runAlgorithm( int support, int confidence ) {
		logField.setText("");
		outputTable.setRules( algorithm.run(support, confidence) );
	}

	/**
	 * Data table containing the input (transactions).
	 * @author Benjamin Bouvier
	 *
	 */
	private static class DataTable extends JTable {

		private static final long serialVersionUID = -4322699642816860737L;

		private DataTableModel model;

		public DataTable() {
			super(new DataTableModel());
			model = (DataTableModel) getModel();
			this.getColumnModel().getColumn(0).setPreferredWidth(5);
			this.getColumnModel().getColumn(1).setPreferredWidth(700);
		}

		public void setTransactions(List<Itemset> values) {
			model.setTransactions(values);
			this.getColumnModel().getColumn(0).setPreferredWidth(5);
			this.getColumnModel().getColumn(1).setPreferredWidth(700);
		}
	}

	// Model of this table: ID / Transaction
	private static class DataTableModel extends DefaultTableModel {
		private static final long serialVersionUID = 5801968064491093654L;

		public DataTableModel() {
			super(new Object[][] {}, new String[] { "ID", "Transaction" });
		}

		Object[][] data = null;
		String[] columnNames = new String[] { "ID", "Transaction" };
		Class[] columnTypes = new Class[] { Integer.class, String.class };

		public Class getColumnClass(int columnIndex) {
			return columnTypes[columnIndex];
		}

		// Converts transactions in displayable data
		public void setTransactions(List<Itemset> values) {
			data = new Object[values.size()][2];
			for (int i = 0; i < values.size(); ++i) {
				data[i][0] = i + 1;
				data[i][1] = values.get(i).toString();
			}
			setDataVector(data, columnNames);
		}
	}
	
	/**
	 * Table containing all the rules.
	 * @author Benjamin Bouvier
	 *
	 */
	private static class OutputTable extends JTable {

		private static final long serialVersionUID = -4322699642816860737L;

		private OutputTableModel model;

		public OutputTable() {
			super(new OutputTableModel());
			model = (OutputTableModel) getModel();
			this.getColumnModel().getColumn(0).setPreferredWidth(5);
		}

		public void setRules(List<Rule> rules) {
			model.setRules(rules);
			this.getColumnModel().getColumn(0).setPreferredWidth(5);
		}
	}

	// Model: ID / Premise / Conclusion / Absolute support / Relative support / Confidence
	private static class OutputTableModel extends DefaultTableModel {
		private static final long serialVersionUID = 5801968064491093654L;
		
		private static String[] columnNames = { "ID", "Premise", "Conclusion", "Support", "Relative support", "Confidence" };

		public OutputTableModel() {
			super(new Object[][] {}, columnNames );
		}

		Object[][] data = null;
		Class[] columnTypes = new Class[] { Integer.class, String.class, String.class, Integer.class, Integer.class, Integer.class };

		public Class getColumnClass(int columnIndex) {
			return columnTypes[columnIndex];
		}

		public void setRules(List<Rule> values) {
			data = new Object[values.size()][6];
			for (int i = 0; i < values.size(); ++i) {
				data[i][0] = i + 1;
				Rule r = values.get(i);
				data[i][1] = r.getPremise().toString();
				data[i][2] = r.getConclusion().toString();
				data[i][3] = r.getSupport();
				data[i][4] = r.getRelativeSupport();
				data[i][5] = r.getConfidence();
			}
			setDataVector(data, columnNames);
		}
	}

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					AprioriGui window = new AprioriGui();
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public AprioriGui() {
		initialize();
	}
	
	/**
	 * Sets a possible source for the transactions.
	 * Clears the log field and generates the transactions.
	 * Activates also the algorithm panel.
	 * 
	 * @param source Any transaction source
	 */
	private void chooseSource( TransactionSource source ) {
		logField.setText("");
		algorithm.setSource( source );
		dataTable.setTransactions( algorithm.getTransactions() );
		tabbedPane.setEnabledAt(1, true);
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		frame = new JFrame();
		frame.setBounds(100, 100, 800, 600);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		JFrame.setDefaultLookAndFeelDecorated(true);

		tabbedPane = new JTabbedPane(JTabbedPane.TOP);
		frame.getContentPane().add(tabbedPane, BorderLayout.CENTER);

		final JSplitPane inputPanel = new JSplitPane();
		inputPanel.setOrientation(JSplitPane.VERTICAL_SPLIT);
		tabbedPane.addTab("Input", null, inputPanel,
				"Data source and input data");

		JPanel dataPanel = new JPanel();
		inputPanel.setTopComponent(dataPanel);
		dataPanel.setLayout(new FlowLayout());

		JLabel lblChooseYourSource = new JLabel("Choose your source input:");
		dataPanel.add(lblChooseYourSource);

		JButton btnTestData = new JButton("Test Data");
		// on click, changes the source to TestTransaction source.
		btnTestData.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				chooseSource(new TestTransactionSource());
			}
		});
		dataPanel.add(btnTestData);

		JButton btnRandomData = new JButton("Random Data");
		// on click, generates some random transactions
		btnRandomData.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				chooseSource(new RandomTransactionSource(
						RANDOM_TRANSACTIONS_NUMBER));
			}
		});
		dataPanel.add(btnRandomData);

		JButton btnCsvFileData = new JButton("CSV File Data");
		// on click, opens a window to select a CSV file, them read it as a set of transactions
		btnCsvFileData.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				String initial = AprioriGui.class.getResource("AprioriGui.class").getFile();
				JFileChooser fc = new JFileChooser(initial);
				fc.setFileFilter(new FileFilter() {

					@Override
					public boolean accept(File f) {
						if (f.isDirectory()) {
							return true;
						}

						String filename = f.getName();
						int i = filename.lastIndexOf(".");
						if (i > 0 && i < filename.length()) {
							return (filename.substring(i + 1).equals("csv"));
						}
						return false;
					}

					@Override
					public String getDescription() {
						return "Coma Separated Values (csv) file";
					}

				});

				int fcReturn = fc.showOpenDialog(frame);
				if (fcReturn == JFileChooser.APPROVE_OPTION) {
					File file = fc.getSelectedFile();
					chooseSource(new CsvFileSource(file
							.getAbsolutePath()));
				}
			}
		});
		dataPanel.add(btnCsvFileData);

		JButton btnDatabaseData = new JButton("Database Data");
		// on click, loads the transactions stored into the database
		btnDatabaseData.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				chooseSource( new DbSource() );
			}
		});
		dataPanel.add(btnDatabaseData);

		JPanel sourcePanel = new JPanel();
		inputPanel.setBottomComponent(sourcePanel);
		sourcePanel.setLayout(new CardLayout(0, 0));
		dataTable.setRowSelectionAllowed(false);
		dataTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

		sourcePanel.add(new JScrollPane(dataTable));

		JPanel resultPanel = new JPanel();
		tabbedPane.addTab("Association rules", null, resultPanel,
				"Run parameters and results");
		tabbedPane.setEnabledAt(1, false);
		resultPanel.setLayout(new BorderLayout(0, 0));
		
		JPanel paramPanel = new JPanel();
		resultPanel.add(paramPanel, BorderLayout.NORTH);
		paramPanel.setLayout(new FlowLayout());
		
		JPanel topParamPanel = new JPanel();
		paramPanel.add(topParamPanel);
		
		JLabel lblEnterTheSupport = new JLabel("Enter the support (percentage)");
		topParamPanel.add(lblEnterTheSupport);
		
		final JSpinner supportSpinner = new JSpinner();
		supportSpinner.setModel(new SpinnerNumberModel(50, 0, 100, 1));
		topParamPanel.add(supportSpinner);
		
		JPanel bottomParamPanel = new JPanel();
		paramPanel.add(bottomParamPanel);
		
		JLabel lblEnterTheConfidence = new JLabel("Enter the confidence (percentage)");
		bottomParamPanel.add(lblEnterTheConfidence);
		
		final JSpinner confidenceSpinner = new JSpinner();
		confidenceSpinner.setModel(new SpinnerNumberModel(50, 0, 100, 1));
		bottomParamPanel.add(confidenceSpinner);
		
		JButton btnCompute = new JButton("Find association rules");
		// on click, launches the algorithm
		btnCompute.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				runAlgorithm( (Integer)supportSpinner.getValue(), (Integer) confidenceSpinner.getValue() );
			}
		});
		paramPanel.add(btnCompute);
		
		JPanel outputPanel = new JPanel();
		outputPanel.setLayout(new BorderLayout(0, 0));
		outputPanel.add(new JScrollPane(outputTable));
		resultPanel.add(outputPanel, BorderLayout.CENTER);

		JPanel logPanel = new JPanel();
		logPanel.setLayout(new BorderLayout(0, 0));
		
		logField = new JTextArea();
		logField.setEditable(false);
		logField.setLineWrap(true);
		logPanel.add(logField, BorderLayout.CENTER);
		
		tabbedPane.addTab("Log", null, new JScrollPane(logPanel), "Logged informations");
	}
}
